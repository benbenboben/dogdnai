# -*- coding: utf-8 -*-
"""dogbreeds.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AMsRYIzCaFSes42cv6NnfjBDga-G0UxL
"""

from google.colab import drive
drive.mount('/content/drive')

!curl http://vision.stanford.edu/aditya86/ImageNetDogs/images.tar -o /content/images.tar

!pwd

!tar -xvf /content/images.tar

!pip install split-folders

import os
import splitfolders

if not os.path.exists('/content/ImagesML'):
  splitfolders.ratio('/content/Images', output="ImagesML", seed=42, ratio=(.7, 0.15, 0.15))

from tensorflow.keras.preprocessing import image_dataset_from_directory
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.0,
        zoom_range=0.2,
        horizontal_flip=True,
        rotation_range=45,
        brightness_range=(0.5, 1.5)
)

train_generator = train_datagen.flow_from_directory(
        '/content/ImagesML/train/',
        target_size=(512, 512),
        batch_size=32,
        class_mode='categorical'
)

valid_datagen = ImageDataGenerator(
        rescale=1./255,
)

valid_generator = valid_datagen.flow_from_directory(
        '/content/ImagesML/val',
        target_size=(512, 512),
        batch_size=32,
        class_mode='categorical'
)

from tensorflow.keras import layers
from tensorflow.keras import models

from tensorflow.keras.preprocessing.image import load_img

from tensorflow.keras.applications import ResNet50, InceptionV3, Xception, MobileNetV3Large, MobileNetV3Small
base_model = Xception(weights='imagenet', include_top=False, input_shape=(512, 512, 3))
# base_model = Xception(weights='imagenet', include_top=False, input_shape=(256, 256, 3))

# add a global spatial average pooling layer
x = base_model.output
x = layers.GlobalAveragePooling2D()(x)
# x = layers.Flatten()(x)
# let's add a fully-connected layer
x = layers.Dense(1024, activation='relu')(x)
# and a logistic layer -- let's say we have 200 classes
predictions = layers.Dense(120, activation='softmax')(x)

model = models.Model(inputs=base_model.input, outputs=predictions)

# first: train only the top layers (which were randomly initialized)
# i.e. freeze all convolutional InceptionV3 layers
for layer in base_model.layers:
    layer.trainable = False

# compile the model (should be done *after* setting layers to non-trainable)
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

# train the model on the new data for a few epochs

# at this point, the top layers are well trained and we can start fine-tuning
# convolutional layers from inception V3. We will freeze the bottom N layers
# and train the remaining top layers.

# # let's visualize layer names and layer indices to see how many layers
# # we should freeze:
# for i, layer in enumerate(base_model.layers):
#    print(i, layer.name)

# # we chose to train the top 2 inception blocks, i.e. we will freeze
# # the first 249 layers and unfreeze the rest:
# for layer in model.layers[:249]:
#    layer.trainable = False
# for layer in model.layers[249:]:
#    layer.trainable = True

# # we need to recompile the model for these modifications to take effect
# # we use SGD with a low learning rate
# from tensorflow.keras.optimizers import SGD
# model.compile(optimizer=SGD(lr=0.0001, momentum=0.9), loss='categorical_crossentropy')

# model = models.Sequential()
# model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
# model.add(layers.MaxPooling2D((2, 2)))
# model.add(layers.Conv2D(64, (3, 3), activation='relu'))
# model.add(layers.MaxPooling2D((2, 2)))
# model.add(layers.Conv2D(64, (3, 3), activation='relu'))
# # model.add(layers.MaxPooling2D((2, 2)))
# # model.add(layers.Conv2D(64, (3, 3), activation='relu'))
# model.add(layers.Flatten())
# model.add(layers.Dense(64, activation='relu'))
# model.add(layers.Dense(120, activation='softmax'))

# model.compile(loss='categorical_crossentropy', optimizer='adam')

model.fit_generator(
        train_generator,
        epochs=10,
        validation_data=valid_generator,
)

test_datagen = ImageDataGenerator(
        rescale=1./255,
)

test_generator = test_datagen.flow_from_directory(
        '/content/ImagesML/test',
        target_size=(512, 512),
        batch_size=32,
        shuffle=False
)

# valid_generator.class_indices

import numpy as np
from tensorflow.keras.preprocessing.image import img_to_array

predictions = model.predict(test_generator)

yte = test_generator.classes

len(yte)

from sklearn.metrics import accuracy_score

predictions.argmax(axis=1)

yte

accuracy_score(yte, predictions.argmax(axis=1))

predictions.argmax(axis=1)

from sklearn.metrics import confusion_matrix

import seaborn as sns

sns.heatmap(confusion_matrix(yte, predictions.argmax(axis=1)))

model.save('/content/drive/MyDrive/dog_breed_clf_small')

from tensorflow.keras.models import load_model

!pip install pyperclip

import json

import pyperclip
json.dumps(train_generator.class_indices)

loaded = load_model('/content/drive/MyDrive/dog_breed_clf')

np.allclose(loaded.predict(img_batch).ravel(), model.predict(img_batch).ravel())

model.predict(img_batch).ravel()

import json
json.dumps(test_generator.class_indices)

import tensorflow as tf

tf.__version__

